[
	{
		"id" : 1,
		"title" : "Hibernate field mapping",
		"body" : "<p>I've spent a lot of the summer studying up on several tools, one of which is Hibernate. Hibernate is an ORM (object relational model) Tool that I would describe as the glue between Java pojos, the data access object layer and the database itself. The code shown above shows one of the ways you can 'map' table columns to fields within an xml file, which you can then use in the dao classes to easier perform CRUD operations.</p>",
		"code" : "<property name='firstName' column='first_name' type='string' />",
		"html" : "true",
		"date" : "08/12/2014",
		"tags" : [
			"hibernate",
			"orm",
			"java"
		]
	},
	{
		"id" : 2,
		"title" : "Transferring files using SCP",
		"body" : "<p>I recently installed a fresh copy of Ubuntu on a desktop machine, and have been playing a lot with linux/unix bash. Since I have tomcat running on linux, it's practical to use this to deploy, say a .war file, since I'm frequently working on java web projects on my Mac. Simply use the scp command, specify the file for transfer, your username and hostname followed by the absolute path to where the file needs to go. Also very useful if I want to quickly move a file over to my other machine. It prompted me for a password, and moved the file without any trouble. Wonderful.</p>",
		"code" : "$ scp Project.war nathanfrancy@hostname:/usr/tomcat/webapps",
		"html" : "false",
		"date" : "08/13/2014",
		"tags" : [
			"linux",
			"scp",
			"command line",
			"tomcat"
		]
	},
	{
		"id" : 3,
		"title" : "Fading in content on this page",
		"body" : "<p>Somewhere deep in the world of Stack Overflow, I found this technique of fading in content. 'linertext' is just a string of HTML that I'm inserting into the DOM using the <code>appendTo</code> method, while using the <code>fadeIn</code> method to give it a cool effect.</p>",
		"code" : "$(linertext).hide().appendTo('#oneliners-data').fadeIn();",
		"html" : "false",
		"date" : "08/14/2014",
		"tags" : [
			"javascript",
			"json",
			"jquery",
			"html"
		]
	},
	{
		"id" : 4,
		"title" : "Sass loop",
		"body" : "<p>This is the start of a loop I wrote using sass, which is a CSS preprocessor that sortof extends the functionality of CSS (thus, using a for loop). I'm actually using this loop as a part of this site to assign background images to each of the project pieces on the projects page.</p>",
		"code" : "@for $i from 0 through 11 {",
		"html" : "false",
		"date" : "08/21/2014",
		"tags" : [
			"sass",
			"css"
		]
	},
	{
		"id" : 5,
		"title" : "Eclipse views disappearing",
		"body" : "<p>Sometimes I'll have disappearing views in eclipse as a result from switching back and forth from one screen to two screens, and vice-versa. You'll have to re-personalize how you like it, but at least you'll have your views back instead of nowhere to be found. And this might seem obvious at first, but I never actually knew this existed (could be only in some versions of eclipse).</p>",
		"code" : "Window > Reset Perspective",
		"html" : "false",
		"date" : "08/26/2014",
		"tags" : [
			"eclipse"
		]
	},
	{
		"id" : 6,
		"title" : "jQuery click handlers",
		"body" : "<p>I'm a fan of using jQuery to manipulate the content of my view (mainly after an ajax call or something), but sometimes this can get messy with the regular <code>$(identifier).click()</code> handler, if the content you're trying to click on was inserted after the page loads. The DOM isn't aware of this content, and therefore won't execute your code like you want. Using the method above makes the DOM able to 'see' that content again with jQuery.</p>",
		"code" : "$(document).on('click', '.list-user-item', function(e)",
		"html" : "false",
		"date" : "09/11/2014",
		"tags" : [
			"jquery",
            "javascript"
		]
	}
    
    
]
